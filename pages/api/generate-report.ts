import type { NextApiRequest, NextApiResponse } from 'next';

type ReportData = {
  notes: string[];
};

type ReportResponse = {
  report: string;
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<ReportResponse | { error: string }>
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  const { notes } = req.body as ReportData;

  if (!notes || !Array.isArray(notes) || notes.length === 0) {
    return res.status(400).json({ error: 'No notes provided for report generation.' });
  }

  try {
    // In a real application, you would call the Gemini API here.
    // For this example, we'll simulate a report generation.
    const geminiResponse = await new Promise<string>((resolve) => {
      setTimeout(() => {
        const combinedNotes = notes.map((note, index) => `${index + 1}. ${note}`).join('\n');
        const simulatedReport = `## Research Report\n\nBased on your research notes:\n\n${combinedNotes}\n\n---\n\n**Analysis (Generated by AI):**\n\nThis report synthesizes the provided notes, highlighting key themes and potential areas for further exploration. The AI has identified patterns and relationships within the data, offering insights that can inform your next steps.\n\n**Key Takeaways:**\n\n*   The notes cover diverse topics, indicating a broad scope of research.\n*   Specific recurring keywords suggest central themes.\n*   Further investigation into [specific area] could yield significant results.\n\n**Recommendations:**\n\n1.  Prioritize notes related to [theme 1] for in-depth analysis.\n2.  Explore external resources to corroborate findings on [theme 2].\n3.  Consider organizing notes by [category] to improve clarity.\n\nThis report is an initial assessment. For a more detailed analysis, please provide more context or specific questions.\n\n`;
        resolve(simulatedReport);
      }, 2000); // Simulate API call delay
    });

    res.status(200).json({ report: geminiResponse });
  } catch (error) {
    console.error('Gemini API Error:', error);
    res.status(500).json({ error: 'Failed to generate report from Gemini API.' });
  }
}
